@inherits LayoutComponentBase
@using MongoDB.Driver;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="top-row px" style="z-index: 1000;">
        @if (loginFailed)
        {
            <Alert Message="登录失败，请重试" Type="@AlertType.Error" Closable />
        }
        @if (!isLogin)
        {
            @if (isLogining)
            {
                <Button>尝试登录中</Button>
            }
            else
            {
                <Input style="width:150px" placeholder="账号" type="text" @bind-Value="input_user" />
                <Input style="width:150px" placeholder="密码" type="password" @bind-Value="input_password" />
                <Button @onclick="Login">登录</Button>
            }
        }
        else
        {
            <Button Type="link">欢迎你，陌生而可敬的 @user </Button>
            <Button OnClick="Logout">登出</Button>
        }
    </div>
    <CascadingValue Value=user>
        <div class="content px-4">
            @Body
        </div>
    </CascadingValue>
</div>

@code
{
    bool isLogin = false;
    bool isLogining = true;
    bool loginFailed = false;
    string input_user = "";
    string input_password = "";
    string user = "";
    string localStorageUserName = "USER_NAME";
    async Task Login()
    {
        isLogining = true;
        loginFailed = false;
        await Task.Delay(10);
        if (Command.Login(input_user, input_password))
        {
            user = input_user;
            isLogin = true;
            await localStorage.SetItemAsync(localStorageUserName, user);
        }
        else
        {
            loginFailed = true;
            Console.WriteLine("登陆失败");
        }
        isLogining = false;
    }
    public class LoginUser
    {
        public string _id { get; set; }
        public string PlayerName { get; set; }
        public string UserName { get; set; }
        public string PassWord { get; set; }
        public object[] Decks { get; set; }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        isLogining = true;
        var localName = await localStorage.GetItemAsync<string>(localStorageUserName);
        if (localName != null && localName != "")
        {
            user = localName;
            isLogin = true;
        }
        isLogining = false;
        StateHasChanged();
    }
    async Task Logout()
    {
        await localStorage.SetItemAsync(localStorageUserName, "");
        user = "";
        isLogin = false;
    }
}
